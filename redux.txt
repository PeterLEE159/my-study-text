- 동작방식
	- 플로우
		- action -> reducer -> state

	- action
		- 자바스크립트 오브젝트, 리듀서에 있는 데이터를 어떻게 조작할지 결정한다.

	- reducer
		- 데이터를 반환 시키는 함수

	- state
		- 실제로 사용할 데이터

	- store
		- 전체적인 관점에서 데이터를 보유

- redux를 사용하는 이유
	- 코드 양 최소화
	- 코드 복잡도 최소화
	- 다양한 기능 제공


- react-native에 적용
	- Provider(from 'react-redux') 태그를 이용해 적용

		- import { Provider, connect } from 'react-redux';
		- import { combineReducers } from 'redux';
		- 
		- 
		const App = () => {
			<Provider store={createStore(combineReducers({
				reducerName1: reducerFn1,
				reducerName2: reducerFn2,
				... (그외 다른 reducers )
			}))}>
				<LibraryList />
			</Provider>
		}
		

		  class LibraryList extends Component {
		  	render() {
		  		return <..>;
		  	}

		  	mapStateToProps(reducerState) {
		  		return (
		  			propData: reducerState.reducerName1
		  		)
		  	}

		  	export connect(mapStateToProps)(LibraryList);
		  }

	- Provider 안에 태그들은 reducer에 접근 할 수 있게된다.

	- class LibraryList extends Component {

	}


- redux thunk
	- action creator 를 async하게 return 함
	- action이 dispatch로 배치됨을 이용해 redux thuck call back
		함수에서 사용하도록 한다.

