
		
BEM (Block Element Modifier)
	목적
		큰 프로젝트에서 front의 naming방식을 일정하게 유지함으로써 개발자간의 대화 그리고 개발 간 코드의 재활용성을 최대화한다
	
	
	작명규칙
		소문자, 숫자만을 사용해 만든다
		여러단어의 조합은 하이픈을 이용해 작명한다
	
	블록
		재사용가능한 기능적으로 독립적인 페이지 구성요소, HTML에서 블록은 CLASS속성으로 표현된다
		형태(color, size)가 아닌 목적(menu, button)에 맞게 결정되어야 한다
		?? 블록은 환경에 영향을 받으면 안된다 (즉 여백, 위치를 설정하면 안된다)
		태그, id 선택자등을 사용해서는 안된다
		
		
	요소
		블록안에서 특정부분을 담당하는 부분
		?? block__element형태로 표현 (더블 언더바)
		형태(color, size)가 아닌 목적(item, text, title)에 맞춰 결정해야 한다
		?? 요소는 중첩해 작성이 가능하다
		요소는 블록의 부분으로써 사용가능하며 다른요소의 부분으로써 사용할 수 없다
		모든 블록에서 요소는 선택적사항이지 필수적 사항이 아니다
	
	수식어
		블록이나 요소의 모양(color, size), 상태 (disabled, checked, absolute)등을 정의한다
		block__element--modifier형태로 사용된다
		수식어는 단독으로 사용이 불가하다
			class="block__element block__element--modifier"
		수식어의 불리언 타입과 키-벨류 타입이 있다
			boolean 타입
				form__button--disabled
			key-value 타입
				키, 벨류를 하이픈으로 연결해 표현한다 (color-red, theme-ocean)
	
	혼합사용
		block1 block2__element형태로 사용이 가능하다
		block2__element에 여백이나 위치를 지정하고 block1은 독립적으로 유지
		
		<div class="header">
			<div class="search-form header__search--form" />
		</div>
		
		
	특이사항
		BEM은 개발이 진행될 수록 CSS의 CLASS의 이름만 보고 어떤 목적인지 추측이 가능하지만
		이름이 너무 길어 다소 괴악하게 보인다 이에 따라 CSS보다는 LESS나 SASS를 사용하는 것이 낫다
	
	
	방법론
		SMACSS (Scalable and Modular Architecture for CSS)
			CSS에 대한 확장형 모듈식 구조(By Jonathan Snook)
			목적
				Class명을 통한 손쉬운 예측
				재사용
				쉬운 유지보수
				확장가능

			핵심규칙
				기본스타일에는 !important를 쓸 필요가 없다

			레이아웃
				class명에 l- 의 prefix를 붙인다

			Module(Components)
				모듈 관련 스타일
				스타일 재사용을 위한 요소
				Block, Element, Module
				재사용을 위해 id 셀렉터와 element를 사용하지 않는다
				(만약 element 셀렉터를 사용해야 한다면 .box>span 처럼 child 셀렉터를 이용)
				nav bar, 이미지 슬라이더, dialogs, widget, table, icons

			State
				상태를 나타내는 스타일
				Hidden, expend, active, hover등의 상태에서 사용

			Theme
				사이트 전반적 look과 feel 제어
				색상이나 이미지를 등을 불변하는 스타일과 분리 기존 스타일을 재 선언해 사용가능하다
				
	다른 방법론에 대해 우선되는 사항
		
	
		
