1. Iterator 패턴
	반복자 패턴
		Iterator와 Aggregator 인터페이스를 정의해 이들을 구현하는 객체들로 반복자 패턴을 이룬다
2. Adapter 패턴
	제공되는 것과 필요한 것 사이를 연결해 주는 것이 어댑터의 역할이다
	어댑터는 개조시키는 것 이라는 의미, AC 어댑터의 역할은 직류 12볼트의 컴퓨터를 교류 100볼트의 환경에 맞게 변경함
	Adapter패턴은 Wrapper 패턴으로 불리기도 한다. wrapper는 감싸는 것 이라는 의미로 일반 상품을 이쁜 포장지로 싸서
	선물용 상품으로 만드는 것처럼 무엇인가를 포장해 다른 용도로 사용할 수 있게 교환하는 것이 wrapper이며 adapter이다
	
	Target
		지금 필요한 메소드를 결정
		노트북을 작동 시키기 위한 직류 12볼트에 해당
		예제 프로그램에서는 Print 인터페이스나 Print 클래스가 이 역할을 수행
		
	Client
		Target 역할의 메소드를 사용해 작업 수행, 직류 12볼트로 움직이는 노트북에 해당한다
	
	Adaptee
		이미 준비되어있는 메소드를 가지고 있는 역할
		교류 100볼트의 AC전원에 해당하며 Banner 클래스가 이 역할을 수행
		이 Adapter역의 메소드가 Target 역할의 메소드와 일치하면 Adapter의 역할은 필요없다
	
	Adapter
		Adapter 역할의 메소드를 사용해 Target 역할을 만족시키기 위한 것이 Adapter 패턴의 목적이며
		Adapter 역할의 임무, 교류 100볼트를 직류 12볼트로 교환하는 것이 Adapter에 해당
		PrintBanner가 Adapter에 해당
		
	사용목적
		기존의 소스가 있을 경우
			이미 존재하고 있는 클래스를 재이용하는 경우, 특히 그 클래스가 충분한 테스트를 받아 버그가 적으며 실제로 지금까지 사용된
			실적이 있다면 어떻게든 그 클래스를 부품으로 재이용할 것임
			Adapter패턴은 기존의 클래스를 개조해 필요한 클래스를 만든다. 이 패턴으로 필요한 메소드를 발빠르게 만들 수 있다
			만일 버그가 발생해도 기존의 클래스에는 버그가 없으므로 Adapter 역할의 클래스를 중심적으로 조사하면 되고 프로그램 검사도 상당히 쉬워진다
		
		기존의 소스가 없을 경우
			이미 만들어진 클래스를 새로운 인터페이스에 맞게 개조시킬 때는 당연히 Adapter패턴을 사용해야 하나 그러나 실제 우리가 새로운 인터페이스에
			맞게 개조시킬 때는 기존 클래스의 소스를 바꾸어서 수정하려고 생각합니다. 그것을 수행하기 위해서는 이미 동작 테스트가 끝나는 기존의 클래스를
			수정하고 다시 한번 테스트해야 한다. Adapter패턴은 기존의 클래스를 전혀 수정하지 않고 목적한 인터페이스에 맞추는것이다.
			또한 Adapter 패턴에서는 기존 클래스의 소스프로그램이 반드시 필요한 것은 아니다. 기존 클래스의 사양만 알면 새로운 클래스를
			만들 수 있다
			

3. Template 패턴
	상위클래스에는 템플릿에 해당하는 메소드가 정의되어 있고 그 메소드의 정의 안에는 추상 메소드가 사용된다 따라서 상위 클래스의 프로그램만 보면 추상메소드를
	어떻게 호출하고 있는지 알 수 있지만 최종적으로 어떤 처리가 이루어지는지는 알 수 없다.
	추상메소드를 실제로 구현하는 것은 하위 클래스이다 하위 클래스 측에서 메소드를 구현하면 구체적인 처리가 결정된다
	서로 다른 하위 클래스가 서로 다른 구현을 실행하면 서로 다른 처리가 실행될 것이다
	그러나 어떤 하위클래스에서 어떤 구현을 하더라도 처리의 큰 흐름은 상위클래스에서 결정한 대로 이루어진다 이와 같이 상위클래스에서 처리의 뼈대를 결정하고
	하위클래스에서 그 구체적인 내용을 결정하는 디자인패턴을 Template 패턴이라고 부른다
	
4. Factory 패턴
	Template패턴에서는 상위 클래스에서 처리의 골격을 만들고 하위클래스에서 구체적인 처리의 내용을 구성했다
	이 패턴을 인스턴스 생성의 장면에 적용한 것이 Factory Method 패턴이다
	Factory Method 패턴에서는 인스턴스를 만드는 작업을 상위클래스 측에서 결정하지만 구체적인 클래스 이름까지는 결정하지 않는다
	구체적인 내용은 모두 하위 클래스에서 수행한다. 따라서 인스턴스 생성을 위한 골격과 실제 인스턴스 생성의 클래스를 분리해 생각할 수 있다
	
	Product
		추상 메소드 use만 정의된 추상클래스
	
	Factory
		메소드 create을 구현하는 추상 클래스
	
	IDCard
		메소드 use를 구현하는 클래스
		
	IDCardFactory
		메소드 createProduct, registerProduct를 구현하는 클래스
	
	Main
		동작 테스트용 클래스
	
		